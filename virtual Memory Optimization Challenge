import random
import tkinter as tk
from tkinter import messagebox

class VirtualMemoryOptimizer:
    def _init_(self, frame_size, pages):
        self.frame_size = frame_size
        self.pages = pages
        self.frames = []
        self.page_faults = 0

    def fifo(self):
        self.frames = []
        self.page_faults = 0
        
        for page in self.pages:
            if page not in self.frames:
                if len(self.frames) < self.frame_size:
                    self.frames.append(page)
                else:
                    self.frames.pop(0)
                    self.frames.append(page)
                self.page_faults += 1
        return self.page_faults
    
    def lru(self):
        self.frames = []
        self.page_faults = 0
        recent_usage = []

        for page in self.pages:
            if page not in self.frames:
                if len(self.frames) < self.frame_size:
                    self.frames.append(page)
                else:
                    lru_page = recent_usage.pop(0)
                    self.frames.remove(lru_page)
                    self.frames.append(page)
                self.page_faults += 1
            
            if page in recent_usage:
                recent_usage.remove(page)
            recent_usage.append(page)
        return self.page_faults
    
    def optimal(self):
        self.frames = []
        self.page_faults = 0
        
        for i in range(len(self.pages)):
            page = self.pages[i]
            if page not in self.frames:
                if len(self.frames) < self.frame_size:
                    self.frames.append(page)
                else:
                    future_pages = self.pages[i+1:]
                    replace_page = None
                    farthest_index = -1
                    
                    for frame_page in self.frames:
                        if frame_page in future_pages:
                            index = future_pages.index(frame_page)
                            if index > farthest_index:
                                farthest_index = index
                                replace_page = frame_page
                        else:
                            replace_page = frame_page
                            break
                    
                    self.frames.remove(replace_page)
                    self.frames.append(page)
                self.page_faults += 1
        return self.page_faults

def run_simulation():
    try:
        num_pages = 20
        frame_size = int(frame_entry.get())
        pages = [random.randint(1, 10) for _ in range(num_pages)]
        optimizer = VirtualMemoryOptimizer(frame_size, pages)
        
        fifo_faults = optimizer.fifo()
        lru_faults = optimizer.lru()
        optimal_faults = optimizer.optimal()
        
        result_text.set(f"Page Reference String: {pages}\n\nFIFO Page Faults: {fifo_faults}\nLRU Page Faults: {lru_faults}\nOptimal Page Faults: {optimal_faults}")
    except ValueError:
        messagebox.showerror("Input Error", "Please enter a valid number for frame size.")

app = tk.Tk()
app.title("Virtual Memory Optimization")
app.geometry("600x450")
app.configure(bg="#f0f0f0")

title_label = tk.Label(app, text="Virtual Memory Optimization", font=("Arial", 16, "bold"), bg="#f0f0f0")
title_label.pack(pady=10)

tk.Label(app, text="Enter Frame Size:", font=("Arial", 12), bg="#f0f0f0").pack(pady=5)
frame_entry = tk.Entry(app, font=("Arial", 12), width=10, justify="center")
frame_entry.pack(pady=5)

tk.Button(app, text="Run Simulation", command=run_simulation, font=("Arial", 12), bg="#4CAF50", fg="white", padx=10, pady=5).pack(pady=10)

result_text = tk.StringVar()
result_label = tk.Label(app, textvariable=result_text, justify="left", font=("Arial", 12), bg="#f0f0f0", wraplength=550)
result_label.pack(pady=10)

app.mainloop()
